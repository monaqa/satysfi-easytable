@import: matrix

% \ctx({
%   | header1    | header2      | header3
%   | align left | align center | align right
%   | a          | b            | c
%   |}  % inline-text list
%      |> table-builder               % (cellfmt * inline-text) matrix * graphics list, cellfmt はすべて l
%      |> align-col [l; c; r]         % (cellfmt * inline-text) matrix * graphics list
%      |> merge (1, 1) (2, 3)        % (cellfmt * inline-text) matrix * graphics list
%      |> align (1, 1) c              % (cellfmt * inline-text) matrix * graphics list
%      |> set (1, 1) (m (2, 3) {aaa}) % (cellfmt * inline-text) matrix * graphics list
%      |> add-graphics []             % (cellfmt * inline-text) matrix * graphics list
%      |> build % inline-text
% );

% セルの書式
type cellfmt = context -> inline-text -> cell

% 罫線のパターン．
type ruleptn = length list -> length list -> graphics list

module TableBuilder : sig

  type builder

% builder pattern. builder の初期化とビルド
  val init : inline-text Matrix.t -> builder
  val from-list : int -> inline-text list -> builder
  val from-itemize : itemize -> builder
  val build : context -> builder -> inline-boxes
  val build-simple : context -> builder -> inline-boxes

% getter, setter
  val get-fmt : builder -> cellfmt Matrix.t
  val set-fmt : cellfmt Matrix.t -> builder -> builder
  val get-fmt- : int * int -> builder -> cellfmt option
  val set-fmt- : int * int -> cellfmt -> builder -> builder
  val get-text : builder -> inline-text Matrix.t
  val set-text : inline-text Matrix.t -> builder -> builder
  val get-text- : int * int -> builder -> inline-text option
  val set-text- : int * int -> inline-text -> builder -> builder
  val get-rules : builder -> ruleptn list
  val set-rules : ruleptn list -> builder -> builder

% ruleptn
  val add-ruleptn : ruleptn -> builder -> builder
  val add-ruleptns : ruleptn list -> builder -> builder

% 高度な編集
  val align-col : cellfmt list -> builder -> builder
  val align-row : cellfmt list -> builder -> builder

  % builder |> merge fmt (rsize, csize) (rinit, cinit)
  % 指定した範囲のセルを結合し、 fmt で整列する。
  % (rinit, cinit) (int * int): 結合するセルの左上端の位置。1始まり。
  % (rsize, csize) (int * int): 結合するセルの大きさ。横2行、縦3列なら (2, 3)。
  % fmt (cellfmt): 結合後のフォーマット。
  val merge : int * int -> int * int -> cellfmt -> builder -> builder

  % builder |> set-fmt-range fmt (rsize, csize) (rinit, cinit)
  % 指定した範囲のセルの書式設定を fmt に変更する。
  % fmt (cellfmt): 結合後のフォーマット。
  % (rsize, csize) (int * int): 変更するセルの行数・列数。横2行、縦3列なら (2, 3)。
  % (rinit, cinit) (int * int): 変更するセルの左上端の位置。1始まり。
  val set-fmt-range : int * int -> int * int -> cellfmt -> builder -> builder

  val convert-text-range : int * int -> int * int -> (inline-text -> inline-text) -> builder -> builder

end = struct

  let default-pads ctx =
    let fs = ctx |> get-font-size in
    (fs *' 0.5, fs *' 0.5, fs *' 0.4, fs *' 0.4)

  let default-cellfmt ctx it =
      NormalCell(default-pads ctx, (read-inline ctx it) ++ inline-fil)

  let empty-cellfmt ctx it = EmptyCell

  let phantom cfmt ctx it =
    let phantomf ib =
      let (w, h, d) = get-natural-metrics ib in
      (inline-graphics w h d (fun (x, y) -> [])) ++ inline-fil
    in
    match cfmt ctx it with
      | NormalCell(pads, ib) ->
          NormalCell(pads, phantomf ib)
      | MultiCell(i, j, pads, ib) ->
          MultiCell(i, j, pads, phantomf ib)
      | EmptyCell -> EmptyCell

  let-rec concat-ruleptn ruleptn-lst xs ys =
    match ruleptn-lst with
    | [] -> []
    | (ruleptn :: others) -> List.append (ruleptn xs ys) (concat-ruleptn others xs ys)

  type builder = (|
    fmt: cellfmt Matrix.t;
    text: inline-text Matrix.t;
    rules: ruleptn list;
  |)

% builder pattern

  let init mat =
    let fmt = default-cellfmt |> Matrix.tile (mat |> Matrix.shape) in
    (|
      fmt = fmt;
      text = mat;
      rules = [];
    |)

  let from-list n-col textlst =
    let it-matrix = Matrix.from-list n-col {} textlst in
    init it-matrix

  let from-itemize (Item(_, lst-item)) =
    let itemize-to-it-vector (Item(it, lst-item)) =
      let extract-it-from-item (Item(it-inner, _)) = it-inner in
      let inner-items = List.map extract-it-from-item lst-item in
      inner-items
    in
    let it-matrix = Matrix.from-llist (List.map itemize-to-it-vector lst-item) in
    init it-matrix

  let build-simple ctx self =
    let ctx-matrix = ctx |> Matrix.tile (self#fmt |> Matrix.shape) in
    let cell-matrix =
      let fmt-ctx-matrix = Matrix.eachmap self#fmt ctx-matrix in
      Matrix.eachmap fmt-ctx-matrix self#text
    in
    let rulef = concat-ruleptn self#rules in

    tabular (Matrix.to-llist cell-matrix) rulef


  let build ctx self =
    let ctx-matrix = ctx |> Matrix.tile (self#fmt |> Matrix.shape) in

    let cell-matrix =
      let fmt-ctx-matrix = Matrix.eachmap self#fmt ctx-matrix in
      Matrix.eachmap fmt-ctx-matrix self#text
    in
    let phantom-cell-matrix =
      let phantom-matrix = phantom |> Matrix.tile (self#fmt |> Matrix.shape) in
      let phantom-fmt-matrix = Matrix.eachmap phantom-matrix self#fmt in
      let phantom-fmt-ctx-matrix = Matrix.eachmap phantom-fmt-matrix ctx-matrix in
      Matrix.eachmap phantom-fmt-ctx-matrix self#text
    in

    let rulef = concat-ruleptn self#rules in

    let ib-rule = tabular (Matrix.to-llist phantom-cell-matrix) rulef in
    let ib-table = tabular (Matrix.to-llist cell-matrix) (fun _ _ -> []) in
    let (w, h, d) = get-natural-metrics ib-table in
    inline-graphics w h d (fun (x, y) -> [
      draw-text (x, y) ib-rule;
      draw-text (x, y) ib-table;
    ])

% getter/setter

  let get-fmt self = self#fmt
  let set-fmt fmtmat self = (| self with fmt = fmtmat |)
  let get-text self = self#text
  let set-text textmat self = (| self with text = textmat |)
  let get-rules self = self#rules
  let set-rules rules self = (| self with rules = rules |)

  let get-fmt- (i, j) self = self#fmt |> Matrix.get (i - 1, j - 1)
  let set-fmt- (i, j) fmt self =
    let new-fmt = self#fmt |> Matrix.set (i - 1, j - 1) fmt in
    (| self with fmt = new-fmt |)

  let get-text- (i, j) self = self#text |> Matrix.get (i - 1, j - 1)
  let set-text- (i, j) text self =
    let new-text = self#text |> Matrix.set (i - 1, j - 1) text in
    (| self with text = new-text |)

% rules

  let add-ruleptns rules self =
    let new-rules = List.concat [self#rules; rules] in
    (| self with rules = new-rules |)

  let add-ruleptn rule = add-ruleptns [rule]

  let align-col fmtlst self =
    let (row, col) = self#fmt |> Matrix.shape in
    if not ((fmtlst |> List.length) == col) then self else
    let fmtmat = fmtlst |> Matrix.copy-row row in
    set-fmt fmtmat self

  let align-row fmtlst self =
    let (row, col) = self#fmt |> Matrix.shape in
    if not ((fmtlst |> List.length) == row) then self else
    let fmtmat = fmtlst |> Matrix.copy-col col in
    set-fmt fmtmat self

  let merge (rinit1, cinit1) (row-size, col-size) fmt self =
    let rinit = rinit1 - 1 in
    let cinit = cinit1 - 1 in
    let multicell-fmt ctx it =
      match fmt ctx it with
      | NormalCell(pads, ib) -> MultiCell(row-size, col-size, pads, ib)
      | MultiCell(i, j, pads, ib) -> MultiCell(i, j, pads, ib)
      | EmptyCell -> EmptyCell
    in
    let emptyfmtmat = empty-cellfmt |> Matrix.tile (row-size, col-size) in
    let fmtmat =
      self#fmt |> Matrix.embed (rinit, cinit) emptyfmtmat
               |> Matrix.set (rinit, cinit) multicell-fmt
    in
    set-fmt fmtmat self

  let set-fmt-range (rinit1, cinit1) (row-size, col-size) fmt self =
    let rinit = rinit1 - 1 in
    let cinit = cinit1 - 1 in
    let fmttile = fmt |> Matrix.tile (row-size, col-size) in
    let fmtmat =
      self#fmt |> Matrix.embed (rinit, cinit) fmttile
    in
    set-fmt fmtmat self

  let convert-text- idx textf self =
    let new-text = self |> get-text-(idx) |> Option.from {} |> textf in
    self |> set-text-(idx) new-text

  let convert-text-range (rinit1, cinit1) (row-size, col-size) textf self =
    let rinit = rinit1 - 1 in
    let cinit = cinit1 - 1 in
    let textf-id = (fun it -> it) |> Matrix.tile (self#text |> Matrix.shape) in
    let textftile = textf |> Matrix.tile (row-size, col-size) in
    let textfmat =
      textf-id |> Matrix.embed (rinit, cinit) textftile
    in
    let new-text = Matrix.eachmap textfmat (self#text) in
    self |> set-text new-text
end

